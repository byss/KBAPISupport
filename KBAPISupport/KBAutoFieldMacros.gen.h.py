#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  KBAutoFieldMacros.h.gen.py
#  KBAPISupport
#
#  Created by Kirill byss Bystrov on 08.12.12.
#  Copyright (c) 2012 Kirill byss Bystrov. All rights reserved.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.
#

######################### CONFIG #########################
OUTPUT = 'KBAutoFieldMacros.gen.h'
PROJECT = 'KBAPISupport'
GENERATOR = 'KBAutoFieldMacros.gen.h.py'
COPYRIGHT = ''
LICENSE = '''\
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.'''
AUTOFIELD_CONVINIENCE_CREATOR_MAX = 5
DEALLOC_MACRO_MAX = 2

######################### main () #########################

import sys
import time

def error (message, code = -1):
	sys.stderr.write ('Error: ' + str (message) + '\n')
	sys.exit (code)

def autofield_convinience_creator_arg (n):
	if n > 1:
		return 'arg{n}Name, arg{n}Type'.format (n = n)
	else:
		return 'argName, capArgName, argType'

def autofield_convinience_signature (n):
	return ', '.join ([autofield_convinience_creator_arg (i) for i in xrange (1, n + 1)])

def dealloc_field (n):
	return 'field' + str (n)

def dealloc_signature (n):
	return ', '.join (dealloc_field (i) for i in xrange (1, n + 1))

fout = open (OUTPUT, "wt")
if not fout:
	error ('Cannot open output file "' + OUTPUT + '".')

COPYRIGHT_STRING = COPYRIGHT and '// Copyright (c) {YEAR} {COPYRIGHT}. All rights reserved.\n'.format (
	YEAR = str (time.localtime ().tm_year),
	COPYRIGHT = COPYRIGHT,
) or ""

fout.write ('''\
//
//  {OUTPUT}
//  {PROJECT}
//
//  Generated by {GENERATOR} on {DATE}.
{COPYRIGHT}//
'''.format (
	OUTPUT = OUTPUT,
	PROJECT = PROJECT,
	GENERATOR = GENERATOR,
	DATE = time.strftime ('%d.%m.%y'),
	COPYRIGHT = COPYRIGHT_STRING,
))

license_lines = LICENSE.split ('\n')
for line in license_lines:
	fout.write ('//  ' + line + '\n')

fout.write ('//\n\n')

if AUTOFIELD_CONVINIENCE_CREATOR_MAX > -1:
	fout.write ('''\
#define AUTOFIELD_CONVINIENCE_CREATOR_0(nameSuffix, other...) \\
+ (instancetype) autoField##nameSuffix  { \\
	return KB_AUTORELEASE ([[self alloc] init##other]); \\
}

''')

if AUTOFIELD_CONVINIENCE_CREATOR_MAX > 0:
	fout.write ('''\
#define AUTOFIELD_CONVINIENCE_CREATOR_1(argName, capArgName, argType, other...) \\
	AUTOFIELD_CONVINIENCE_CREATOR_0(With##capArgName: (argType) argName other, With##capArgName: (argType) argName other)

''')

for n in xrange (2, AUTOFIELD_CONVINIENCE_CREATOR_MAX + 1):
	fout.write ('''\
#define AUTOFIELD_CONVINIENCE_CREATOR_{n}({SIGNATURE}, other...) \\
	AUTOFIELD_CONVINIENCE_CREATOR_{prev}({PREV_SIGNATURE}, arg{n}Name: (arg{n}Type) arg{n}Name other)

'''.format (
	n = n,
	SIGNATURE = autofield_convinience_signature (n),
	prev = n - 1,
	PREV_SIGNATURE = autofield_convinience_signature (n - 1),
))

fout.write ('''\
#define DELEGATE_INITIALIZATION(convinienceInit, defaultArgs) \\
- (id) init##convinienceInit { \\
	return [self init##convinienceInit defaultArgs]; \\
}
	
''')

if DEALLOC_MACRO_MAX > 0:
	fout.write ('''\
#if __has_feature(objc_arc)
#	define DEALLOC_MACRO_1(...)
#else
#	define DEALLOC_MACRO_1(field, other...) \\
- (void) dealloc { \\
	[_##field release]; \\
	other \\
	\\
	[super dealloc]; \\
}
#endif
		
''')

for n in xrange (2, DEALLOC_MACRO_MAX + 1):
	fout.write ('''\
#if __has_feature(objc_arc)
#	define DEALLOC_MACRO_{n}(...)
#else
#	define DEALLOC_MACRO_{n}({SIGNATURE}, other...) \\
		DEALLOC_MACRO_{prev}({PREV_SIGNATURE}, [_##field{n} release]; other)
#endif

'''.format (
	n = n,
	SIGNATURE = dealloc_signature (n),
	prev = n - 1,
	PREV_SIGNATURE = dealloc_signature (n - 1),
))

fout.close ()
